            ~~~ BACK ~~~
• department
    ! расставить аннотации @Transactional
	- добавление сущности department в табл. +
	* create	+
	* getAll	+
	* getById   +
	* update	+
	* delete	+
	? разобраться с добавлением отделов по id, что бы они не повторялись

• human + employee (роль АДМ)
    ! расставить аннотации @Transactional
	- добавление сущности human в табл. +
	- добавление сущности employee в табл. (имя, фамилия, human_id, дата приема на работу)  +
	- добавление сущности address в табл.   +
	- дата приема на работу задается вручную
	* create	+
	* getAll	+
	* getById	+
	* update	+
	* delete    + - каскадное удаление от employee
	? продумать зависимости между employee и human
	? добавить employee_id в таблицу humans

• employee + login/password (для роли АДМ)
    ! расставить аннотации @Transactional
    - создается при создании human и заполняются поля: имя, фамилия, human_id, дата приема на работу
	- дозаполнить поля employee
	* create	+ ???
	* getAll    +
	* getById   +
	* update    + //изменять поле, которых нет в сущности human
	* delete    +

• authentication
    ! расставить аннотации @Transactional
    ! оставить на потом, когда будет готова основная часть работы
    - при создании human автоматически создается логин(email) и пароль(рандом генерация)
    - после регистрации кнопка "зарегестрироваться" меняется на кнопку "войти" - для этого необходимо
        сделать флаг "зарегистрирован"
    - сделать валидацию по employee_id, что бы не повторялись записи

    ? как делать!!!
    * create
    * updatePasswd  //назначать может только админ, реализуется в отдельном окне
    * getAll
    * getByEmployeeId

• fileToDataBase
    ! расставить аннотации @Transactional
    - хранит информацию о файле
    - имеет связь с хранилищем файлов
    - таблицу file_entity разбить на две (отдельно сделать таблицу колонками is_active, who_edits, id_file)
    - что бы сохранить файл нужно создать отдельную кнопку с формой где указавается путь для сохранения
        используется метод "downloadFile"
    - для изменения файла так же используется метод "downloadFile", но он сразу открывается в программе
        на компьютере
    - добавить поле для связи manytomany. создать связующую таблицу, в которой будет соответствие id_file
        c id_employee для указания какие сотрудники работает с каким файлом
    файл хранится на диске, в бд прописан путь к файлу
    * create
    * getById   //открыть файл          +
    * update    //изменить файл         + доработать
    * upload    //загрузить файл в базу +
    * download  //скачать файл из базы  +
    * delete
    ? как с бэка передать файлы на фронт    +



• общие
    - флаг доступа к проектам
    - реализовать метод создания employee и human по умолчанию (как при создании human)
    - прописать логи по всем действиям
    - в securityFilterChain прописываем доступ к страницам для каждых ролей
    - решить проблему stackowerflow при получении сущности human
    - сделать зависимость employee(parent) -> authentication(child)




            ~~~ FRONT ~~~
- при редактировании сотрудника фронт запрашивает у бэка список отделов (выпадающий список) и по значению
    в сотрудника добавляется department_id


            ~~~ ОРГАНИЗАЦИОННЫЕ ВОПРОСЫ ~~~
- правильно ли, что при запросе всех сотрудников в json подгружается информация с других таблиц?
    (можно использовать ленивую загрузку)
- почему при двухсторонней связи вызвав метод getAllClass одной таблицы происходит StackOverflow?
    как решить эту проблему?
    (добавить каскад в одной сущности, так же добавить сервис второй сущности в первую
    проблема n + 1 решается join-ом нужной таблицы)
- можно ли в таблицу добавить просто id другой сущности?
- какие методы помечаются аннотацией @Transactional?
    (над теми, которые вносят изменения в таблицу и имеет много методов для работы с многими таблицами)
- для чего создаем список в сущности при связи @OneToMany?
    как им пользоваться?



            ~~~ ВОПРОСЫ ДЛЯ ИЗУЧЕНИЯ ~~~
- чем отличаются запросы (get, post, put, delete)
- что значит аннотация @PathVariable